{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducci\u00f3n Documentacion sobre Estructuras de datos \u00bfQu\u00e9 son las estructuras de datos?\u00bfPor qu\u00e9 las estudiamos en esta materia?, bien lo que nos interesa de este tipo de programaci\u00f3n es almacenar informaci\u00f3n o mas que nada como se almacena, como accedemos a ella, y que utilidad presenta en el dia a dia. Pero primero definamos que es una estructura de datos: En ciencias de la computaci\u00f3n , una estructura de datos es una forma particular de organizar datos en una computadora para que puedan ser utilizados de manera eficiente. Diferentes tipos de estructuras de datos son adecuados para diferentes tipos de aplicaciones , y algunos son altamente especializados para tareas espec\u00edficas. ( Wikipedia ). por lo que podemos ver en esta breve definici\u00f3n son forma de almacenar informaci\u00f3n de forma eficiente. pero \u00bfPara qu\u00e9 queremos almacenarla de forma eficiente?\u00bfno basta con almacenarla y ya?, pues no y es sencillo la raz\u00f3n, y es que nosotros necesitamos m\u00e1s eficiencia y velocidad cuando se necesita operar con dicha informaci\u00f3n. Imaginate tener que resolver un problema que involucra esta informaci\u00f3n, tardariamos mas si no se almacenar\u00e1 de forma eficiente, podr\u00edamos tardar a\u00f1os en resolver un problema (hay problemas que siendo eficientes las formas y estando optimizados dichos algoritmos tardan a\u00f1os en encontrar soluciones ejemplo de esto es la b\u00fasqueda de n\u00fameros primos con fines investigativos). Por lo que nos interesa y mucho almacenar informaci\u00f3n de forma eficiente, tanto para buscar, almacenar, obtener y otras operaciones que podemos necesitar. por los que vamos a profundizar en dichas estructuras en los siguientes cap\u00edtulos o secciones. issues github","title":"Introducci\u00f3n"},{"location":"#introduccion","text":"Documentacion sobre Estructuras de datos \u00bfQu\u00e9 son las estructuras de datos?\u00bfPor qu\u00e9 las estudiamos en esta materia?, bien lo que nos interesa de este tipo de programaci\u00f3n es almacenar informaci\u00f3n o mas que nada como se almacena, como accedemos a ella, y que utilidad presenta en el dia a dia. Pero primero definamos que es una estructura de datos: En ciencias de la computaci\u00f3n , una estructura de datos es una forma particular de organizar datos en una computadora para que puedan ser utilizados de manera eficiente. Diferentes tipos de estructuras de datos son adecuados para diferentes tipos de aplicaciones , y algunos son altamente especializados para tareas espec\u00edficas. ( Wikipedia ). por lo que podemos ver en esta breve definici\u00f3n son forma de almacenar informaci\u00f3n de forma eficiente. pero \u00bfPara qu\u00e9 queremos almacenarla de forma eficiente?\u00bfno basta con almacenarla y ya?, pues no y es sencillo la raz\u00f3n, y es que nosotros necesitamos m\u00e1s eficiencia y velocidad cuando se necesita operar con dicha informaci\u00f3n. Imaginate tener que resolver un problema que involucra esta informaci\u00f3n, tardariamos mas si no se almacenar\u00e1 de forma eficiente, podr\u00edamos tardar a\u00f1os en resolver un problema (hay problemas que siendo eficientes las formas y estando optimizados dichos algoritmos tardan a\u00f1os en encontrar soluciones ejemplo de esto es la b\u00fasqueda de n\u00fameros primos con fines investigativos). Por lo que nos interesa y mucho almacenar informaci\u00f3n de forma eficiente, tanto para buscar, almacenar, obtener y otras operaciones que podemos necesitar. por los que vamos a profundizar en dichas estructuras en los siguientes cap\u00edtulos o secciones. issues github","title":"Introducci\u00f3n"},{"location":"lineales/","text":"Lineales Estas estructuras son las principales y las m\u00e1s intuitivas a la hora de representar y almacenar informaci\u00f3n. Almacenan datos de forma lineal, esto es uno despu\u00e9s que la otro. por lo que se forman una fila de informaci\u00f3n. en estas estructuras hay algunas diferencias en cuanto a c\u00f3mo se recupera dicha informaci\u00f3n y de c\u00f3mo se almacena. Lineales Pila Operaciones del TDA Pila Implementacion Estatica Pila Esta estructura es una de tipo LIFO (Last In, First Out). el \u00faltimo elemento es el primero en salir como en las torres de hanoi o una pila de platos. Por lo que tendremos que representar este tipo de control para solo poder sacar el primer elemento. Como podemos ver en la figura 2.1 tenemos una variable tope que apunta al \u00faltimo elemento almacenado. tendremos dos operaciones principales apilar y desapilar . donde apilar coloca un nuevo elemento en el tope, y desapilar saca el elemento del tope y asigna este al que est\u00e1 inmediatamente por debajo. Las pilas son utilizadas para solucionar una amplia variedad de problemas en compiladores, sistemas operativos y otros programas en general. Un ejemplo de este tipo de software son los navegadores de Internet: Los browsers usan una pila para almacenar las direcciones de los sitios recientemente visitados y as\u00ed implementar la funcionalidad \"volver atr\u00e1s\" (backspace). Tambi\u00e9n los editores de texto, que proporcionan normalmente un bot\u00f3n deshacer que cancela las operaciones de edici\u00f3n recientes en el orden inverso al que fueron hechas. Otro uso com\u00fan es la pila de recursividad, en donde en cada llamado recursivo se apilan los valores de los par\u00e1metros y variables de ese llamado. En general, utilizaremos pilas cada vez que necesitemos recuperar los elementos en el orden inverso al que han sido agregados. Operaciones del TDA Pila constructor vac\u00edo // Crea y devuelve la pila vac\u00eda. apilar (nuevoElem):boolean // Pone el elemento nuevoElem en el tope de la pila. Devuelve verdadero si el elemento se pudo apilar y falso en caso contrario. desapilar():boolean // Saca el elemento del tope de la pila. Devuelve verdadero si la pila no estaba vac\u00eda al momento de desapilar (es decir que se pudo desapilar) y falso en caso contrario. obtenerTope() : elem // Devuelve el elemento en el tope de la pila. Precondici\u00f3n: la pila no est\u00e1 vac\u00eda. esVacia() : boolean // Devuelve verdadero si la pila no tiene elementos y falso en caso contrario. vaciar() : void // Saca todos los elementos de la pila. clone() : Pila // Devuelve una copia exacta de los datos en la estructura original, y respetando el orden de los mismos, en otra estructura del mismo tipo toString() : String // Devuelve una cadena de caracteres formada por todos los elementos de la pila para poder mostrarla por pantalla. Es recomendable utilizar este m\u00e9todo \u00fanicamente en la etapa de prueba y luego comentar el c\u00f3digo. Implementacion veremos c\u00f3mo implementar esta estructura de manera est\u00e1tica y de manera din\u00e1mica, en la primera almacenamos espacio de memoria por lo cual solo podremos opinar de forma finita, en la segunda la memoria es almacenada de forma din\u00e1mica, por lo que podremos opinar de forma indefinida. Estatica","title":"Lineales"},{"location":"lineales/#lineales","text":"Estas estructuras son las principales y las m\u00e1s intuitivas a la hora de representar y almacenar informaci\u00f3n. Almacenan datos de forma lineal, esto es uno despu\u00e9s que la otro. por lo que se forman una fila de informaci\u00f3n. en estas estructuras hay algunas diferencias en cuanto a c\u00f3mo se recupera dicha informaci\u00f3n y de c\u00f3mo se almacena. Lineales Pila Operaciones del TDA Pila Implementacion Estatica","title":"Lineales"},{"location":"lineales/#pila","text":"Esta estructura es una de tipo LIFO (Last In, First Out). el \u00faltimo elemento es el primero en salir como en las torres de hanoi o una pila de platos. Por lo que tendremos que representar este tipo de control para solo poder sacar el primer elemento. Como podemos ver en la figura 2.1 tenemos una variable tope que apunta al \u00faltimo elemento almacenado. tendremos dos operaciones principales apilar y desapilar . donde apilar coloca un nuevo elemento en el tope, y desapilar saca el elemento del tope y asigna este al que est\u00e1 inmediatamente por debajo. Las pilas son utilizadas para solucionar una amplia variedad de problemas en compiladores, sistemas operativos y otros programas en general. Un ejemplo de este tipo de software son los navegadores de Internet: Los browsers usan una pila para almacenar las direcciones de los sitios recientemente visitados y as\u00ed implementar la funcionalidad \"volver atr\u00e1s\" (backspace). Tambi\u00e9n los editores de texto, que proporcionan normalmente un bot\u00f3n deshacer que cancela las operaciones de edici\u00f3n recientes en el orden inverso al que fueron hechas. Otro uso com\u00fan es la pila de recursividad, en donde en cada llamado recursivo se apilan los valores de los par\u00e1metros y variables de ese llamado. En general, utilizaremos pilas cada vez que necesitemos recuperar los elementos en el orden inverso al que han sido agregados.","title":"Pila"},{"location":"lineales/#operaciones-del-tda-pila","text":"constructor vac\u00edo // Crea y devuelve la pila vac\u00eda. apilar (nuevoElem):boolean // Pone el elemento nuevoElem en el tope de la pila. Devuelve verdadero si el elemento se pudo apilar y falso en caso contrario. desapilar():boolean // Saca el elemento del tope de la pila. Devuelve verdadero si la pila no estaba vac\u00eda al momento de desapilar (es decir que se pudo desapilar) y falso en caso contrario. obtenerTope() : elem // Devuelve el elemento en el tope de la pila. Precondici\u00f3n: la pila no est\u00e1 vac\u00eda. esVacia() : boolean // Devuelve verdadero si la pila no tiene elementos y falso en caso contrario. vaciar() : void // Saca todos los elementos de la pila. clone() : Pila // Devuelve una copia exacta de los datos en la estructura original, y respetando el orden de los mismos, en otra estructura del mismo tipo toString() : String // Devuelve una cadena de caracteres formada por todos los elementos de la pila para poder mostrarla por pantalla. Es recomendable utilizar este m\u00e9todo \u00fanicamente en la etapa de prueba y luego comentar el c\u00f3digo.","title":"Operaciones del TDA Pila"},{"location":"lineales/#implementacion","text":"veremos c\u00f3mo implementar esta estructura de manera est\u00e1tica y de manera din\u00e1mica, en la primera almacenamos espacio de memoria por lo cual solo podremos opinar de forma finita, en la segunda la memoria es almacenada de forma din\u00e1mica, por lo que podremos opinar de forma indefinida.","title":"Implementacion"},{"location":"lineales/#estatica","text":"","title":"Estatica"}]}